{"ast":null,"code":"var _jsxFileName = \"/Users/jeeyounghan/Documents/modern-react/src/UserList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction User({\n  user,\n  onRemove,\n  onToggle\n}) {\n  _s();\n\n  useEffect(() => {\n    console.log(user);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      style: {\n        cursor: \"pointer\",\n        color: user.active ? \"green\" : \"black\"\n      },\n      onClick: () => onToggle(user.id),\n      children: user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"(\", user.email, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onRemove(user.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_s(User, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = User;\n\nfunction UserList({\n  users,\n  onRemove,\n  onToggle\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: users.map(user => /*#__PURE__*/_jsxDEV(User, {\n      user: user,\n      onRemove: onRemove,\n      onToggle: onToggle\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = UserList;\nexport default UserList;\n/*\nuseEffect 라는 Hook 을 사용하여 \n컴포넌트가 마운트 됐을 때 (처음 나타났을 때), \n언마운트 됐을 때 (사라질 때), \n그리고 업데이트 될 때 (특정 props가 바뀔 때) \n특정 작업을 처리하는 방법에 대해서 알아보겠습니다.\n\n1. 화면이 처음 떴을때 실행\n    - deps에 [] 빈배열을 넣을 떄\n    - life cycle중 componentDidmount처럼 실행\n2. 화면이 사라질때 실행(cleanup 함수)\n    - componentWillUnmount처럼 실행\n3.deps에 넣은 파라미터값이 업데이트 됬을때 실행\n    - componentDidUpdate처럼 실행\n\n그리고 저는 개인적으로 어느정도 이해가 됬을때\nhttps://rinae.dev/posts/a-complete-guide-to-useeffect-ko\n이 글을 읽고 더 이해가 잘 됬습니다. useEffect는 동기화라는 말이 참 와닿더라구요\n\nps. 혹시 제 글에 잘못된 점이 있거나 하면 알려주세요!\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"User\");\n$RefreshReg$(_c2, \"UserList\");","map":{"version":3,"sources":["/Users/jeeyounghan/Documents/modern-react/src/UserList.js"],"names":["React","useEffect","User","user","onRemove","onToggle","console","log","cursor","color","active","id","username","email","UserList","users","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAd,EAA4C;AAAA;;AAC1CJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACD,GAFQ,CAAT;AAIA,sBACE;AAAA,4BACE;AACE,MAAA,KAAK,EAAE;AACLK,QAAAA,MAAM,EAAE,SADH;AAELC,QAAAA,KAAK,EAAEN,IAAI,CAACO,MAAL,GAAc,OAAd,GAAwB;AAF1B,OADT;AAKE,MAAA,OAAO,EAAE,MAAML,QAAQ,CAACF,IAAI,CAACQ,EAAN,CALzB;AAAA,gBAOGR,IAAI,CAACS;AAPR;AAAA;AAAA;AAAA;AAAA,YADF,uBAWE;AAAA,sBAAQT,IAAI,CAACU,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAQ,MAAA,OAAO,EAAE,MAAMT,QAAQ,CAACD,IAAI,CAACQ,EAAN,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GArBQT,I;;KAAAA,I;;AAuBT,SAASY,QAAT,CAAkB;AAAEC,EAAAA,KAAF;AAASX,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAlB,EAAiD;AAC/C,sBACE;AAAA,cACGU,KAAK,CAACC,GAAN,CAAWb,IAAD,iBACT,QAAC,IAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,QAAQ,EAAEC;AAJZ,OAEOF,IAAI,CAACQ,EAFZ;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;MAbQG,Q;AAeT,eAAeA,QAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from \"react\";\n\nfunction User({ user, onRemove, onToggle }) {\n  useEffect(() => {\n    console.log(user);\n  });\n\n  return (\n    <div>\n      <b\n        style={{\n          cursor: \"pointer\",\n          color: user.active ? \"green\" : \"black\",\n        }}\n        onClick={() => onToggle(user.id)}\n      >\n        {user.username}\n      </b>\n      &nbsp;\n      <span>({user.email})</span>\n      <button onClick={() => onRemove(user.id)}>Delete</button>\n    </div>\n  );\n}\n\nfunction UserList({ users, onRemove, onToggle }) {\n  return (\n    <div>\n      {users.map((user) => (\n        <User\n          user={user}\n          key={user.id}\n          onRemove={onRemove}\n          onToggle={onToggle}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default UserList;\n\n/*\nuseEffect 라는 Hook 을 사용하여 \n컴포넌트가 마운트 됐을 때 (처음 나타났을 때), \n언마운트 됐을 때 (사라질 때), \n그리고 업데이트 될 때 (특정 props가 바뀔 때) \n특정 작업을 처리하는 방법에 대해서 알아보겠습니다.\n\n1. 화면이 처음 떴을때 실행\n    - deps에 [] 빈배열을 넣을 떄\n    - life cycle중 componentDidmount처럼 실행\n2. 화면이 사라질때 실행(cleanup 함수)\n    - componentWillUnmount처럼 실행\n3.deps에 넣은 파라미터값이 업데이트 됬을때 실행\n    - componentDidUpdate처럼 실행\n\n그리고 저는 개인적으로 어느정도 이해가 됬을때\nhttps://rinae.dev/posts/a-complete-guide-to-useeffect-ko\n이 글을 읽고 더 이해가 잘 됬습니다. useEffect는 동기화라는 말이 참 와닿더라구요\n\nps. 혹시 제 글에 잘못된 점이 있거나 하면 알려주세요!\n*/\n"]},"metadata":{},"sourceType":"module"}